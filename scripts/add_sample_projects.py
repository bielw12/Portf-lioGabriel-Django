#!/usr/bin/env python
"""
Script para adicionar projetos de exemplo ao portf√≥lio
Execute: python manage.py shell < scripts/add_sample_projects.py
"""

import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio.settings')
django.setup()

from portfolio_app.models import Project

def create_sample_projects():
    """Cria projetos de exemplo para o portf√≥lio"""
    
    # Limpar projetos existentes (opcional)
    Project.objects.all().delete()
    print("Projetos existentes removidos.")
    
    projects_data = [
        {
            'title': 'E-commerce Django',
            'short_description': 'Plataforma completa de e-commerce com carrinho, pagamentos e painel administrativo.',
            'description': '''Sistema completo de e-commerce desenvolvido em Django com funcionalidades avan√ßadas:
            
‚Ä¢ Sistema de autentica√ß√£o e perfis de usu√°rio
‚Ä¢ Cat√°logo de produtos com categorias e filtros
‚Ä¢ Carrinho de compras e sistema de checkout
‚Ä¢ Integra√ß√£o com gateway de pagamento
‚Ä¢ Painel administrativo para gest√£o de produtos
‚Ä¢ Sistema de avalia√ß√µes e coment√°rios
‚Ä¢ Relat√≥rios de vendas e analytics
‚Ä¢ Design responsivo e otimizado para SEO''',
            'technologies': 'Django, Python, PostgreSQL, Bootstrap, JavaScript, Stripe API, Redis',
            'demo_url': 'https://demo-ecommerce.herokuapp.com',
            'github_url': 'https://github.com/usuario/ecommerce-django',
            'status': 'completed',
            'featured': True,
            'start_date': date.today() - timedelta(days=120),
            'end_date': date.today() - timedelta(days=30),
            'order': 1
        },
        {
            'title': 'API REST Blog',
            'short_description': 'API RESTful para blog com autentica√ß√£o JWT e documenta√ß√£o Swagger.',
            'description': '''API REST completa para sistema de blog desenvolvida com Django REST Framework:
            
‚Ä¢ Autentica√ß√£o JWT com refresh tokens
‚Ä¢ CRUD completo para posts, categorias e coment√°rios
‚Ä¢ Sistema de permiss√µes granular
‚Ä¢ Pagina√ß√£o e filtros avan√ßados
‚Ä¢ Upload de imagens com redimensionamento
‚Ä¢ Documenta√ß√£o autom√°tica com Swagger
‚Ä¢ Testes unit√°rios e de integra√ß√£o
‚Ä¢ Deploy automatizado com Docker''',
            'technologies': 'Django REST Framework, JWT, PostgreSQL, Docker, Swagger, Celery',
            'demo_url': 'https://api-blog-demo.herokuapp.com/docs/',
            'github_url': 'https://github.com/usuario/blog-api-django',
            'status': 'completed',
            'featured': True,
            'start_date': date.today() - timedelta(days=90),
            'end_date': date.today() - timedelta(days=15),
            'order': 2
        },
        {
            'title': 'Sistema de Gest√£o Escolar',
            'short_description': 'Plataforma web para gest√£o de escola com m√≥dulos para alunos, professores e administra√ß√£o.',
            'description': '''Sistema completo de gest√£o escolar desenvolvido em Django:
            
‚Ä¢ M√≥dulo de matr√≠culas e cadastro de alunos
‚Ä¢ Sistema de notas e frequ√™ncia
‚Ä¢ Calend√°rio acad√™mico e hor√°rios
‚Ä¢ Portal do aluno e do professor
‚Ä¢ Relat√≥rios e boletins em PDF
‚Ä¢ Sistema de mensagens internas
‚Ä¢ Controle financeiro e mensalidades
‚Ä¢ Dashboard com m√©tricas e gr√°ficos''',
            'technologies': 'Django, Python, MySQL, Chart.js, Bootstrap, ReportLab, AJAX',
            'demo_url': 'https://gestao-escolar-demo.com',
            'github_url': 'https://github.com/usuario/gestao-escolar',
            'status': 'completed',
            'featured': False,
            'start_date': date.today() - timedelta(days=180),
            'end_date': date.today() - timedelta(days=60),
            'order': 3
        },
        {
            'title': 'Dashboard Analytics',
            'short_description': 'Dashboard interativo para visualiza√ß√£o de dados com gr√°ficos em tempo real.',
            'description': '''Dashboard de analytics desenvolvido com Django e tecnologias modernas:
            
‚Ä¢ Visualiza√ß√£o de dados em tempo real
‚Ä¢ Gr√°ficos interativos com Chart.js e D3.js
‚Ä¢ Filtros din√¢micos por per√≠odo e categoria
‚Ä¢ Exporta√ß√£o de relat√≥rios em PDF/Excel
‚Ä¢ API para integra√ß√£o com outras aplica√ß√µes
‚Ä¢ Sistema de alertas e notifica√ß√µes
‚Ä¢ Interface responsiva e intuitiva
‚Ä¢ Otimiza√ß√£o de performance com cache Redis''',
            'technologies': 'Django, Chart.js, D3.js, Redis, Pandas, PostgreSQL, WebSockets',
            'demo_url': 'https://dashboard-analytics.herokuapp.com',
            'github_url': 'https://github.com/usuario/dashboard-analytics',
            'status': 'completed',
            'featured': False,
            'start_date': date.today() - timedelta(days=75),
            'end_date': date.today() - timedelta(days=10),
            'order': 4
        },
        {
            'title': 'Chat em Tempo Real',
            'short_description': 'Aplica√ß√£o de chat com WebSockets, salas privadas e compartilhamento de arquivos.',
            'description': '''Sistema de chat em tempo real desenvolvido com Django Channels:
            
‚Ä¢ Mensagens instant√¢neas com WebSockets
‚Ä¢ Salas de chat p√∫blicas e privadas
‚Ä¢ Compartilhamento de arquivos e imagens
‚Ä¢ Sistema de notifica√ß√µes push
‚Ä¢ Hist√≥rico de conversas
‚Ä¢ Status online/offline dos usu√°rios
‚Ä¢ Emojis e formata√ß√£o de texto
‚Ä¢ Modera√ß√£o e controle de spam''',
            'technologies': 'Django Channels, WebSockets, Redis, JavaScript, HTML5, CSS3',
            'demo_url': 'https://chat-realtime.herokuapp.com',
            'github_url': 'https://github.com/usuario/chat-django',
            'status': 'in_progress',
            'featured': False,
            'start_date': date.today() - timedelta(days=45),
            'end_date': None,
            'order': 5
        },
        {
            'title': 'Portf√≥lio Pessoal',
            'short_description': 'Site portf√≥lio responsivo com √°rea administrativa para gerenciar projetos e conte√∫do.',
            'description': '''Portf√≥lio pessoal desenvolvido em Django com design moderno:
            
‚Ä¢ Design responsivo e otimizado para SEO
‚Ä¢ √Årea administrativa para gerenciar conte√∫do
‚Ä¢ Galeria de projetos com filtros
‚Ä¢ Formul√°rio de contato funcional
‚Ä¢ Blog integrado para artigos
‚Ä¢ Otimiza√ß√£o de imagens autom√°tica
‚Ä¢ Integra√ß√£o com Google Analytics
‚Ä¢ Deploy automatizado no Heroku''',
            'technologies': 'Django, HTML5, CSS3, JavaScript, Bootstrap, Pillow, Heroku',
            'demo_url': 'https://meu-portfolio.herokuapp.com',
            'github_url': 'https://github.com/usuario/portfolio-django',
            'status': 'completed',
            'featured': True,
            'start_date': date.today() - timedelta(days=30),
            'end_date': date.today() - timedelta(days=5),
            'order': 6
        }
    ]
    
    # Criar projetos
    for project_data in projects_data:
        project = Project.objects.create(**project_data)
        print(f"‚úì Projeto criado: {project.title}")
    
    print(f"\nüéâ {len(projects_data)} projetos de exemplo foram adicionados com sucesso!")
    print("\nProjetos em destaque:")
    featured_projects = Project.objects.filter(featured=True)
    for project in featured_projects:
        print(f"  ‚Ä¢ {project.title}")

if __name__ == "__main__":
    create_sample_projects()
