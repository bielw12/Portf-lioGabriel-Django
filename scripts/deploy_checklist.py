"""
Script para verificar se o projeto est√° pronto para deploy
Execute: python manage.py shell < scripts/deploy_checklist.py
"""

import os
import django
from django.conf import settings
from django.core.management import call_command
from django.core.exceptions import ImproperlyConfigured

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio.settings')
django.setup()

def check_deploy_readiness():
    """Verifica se o projeto est√° pronto para deploy em produ√ß√£o"""
    
    print("üîç Verificando prontid√£o para deploy...")
    print("=" * 50)
    
    issues = []
    warnings = []
    
    # 1. Verificar DEBUG
    if settings.DEBUG:
        issues.append("‚ùå DEBUG est√° habilitado (deve ser False em produ√ß√£o)")
    else:
        print("‚úÖ DEBUG desabilitado")
    
    # 2. Verificar SECRET_KEY
    if settings.SECRET_KEY == 'django-insecure-your-secret-key-here-change-in-production':
        issues.append("‚ùå SECRET_KEY padr√£o detectada (altere para produ√ß√£o)")
    else:
        print("‚úÖ SECRET_KEY personalizada")
    
    # 3. Verificar ALLOWED_HOSTS
    if not settings.ALLOWED_HOSTS or settings.ALLOWED_HOSTS == ['localhost', '127.0.0.1']:
        warnings.append("‚ö†Ô∏è  ALLOWED_HOSTS cont√©m apenas hosts locais")
    else:
        print("‚úÖ ALLOWED_HOSTS configurado")
    
    # 4. Verificar banco de dados
    db_engine = settings.DATABASES['default']['ENGINE']
    if 'sqlite3' in db_engine:
        warnings.append("‚ö†Ô∏è  Usando SQLite (considere PostgreSQL para produ√ß√£o)")
    else:
        print("‚úÖ Banco de dados de produ√ß√£o configurado")
    
    # 5. Verificar arquivos est√°ticos
    if not settings.STATIC_ROOT:
        issues.append("‚ùå STATIC_ROOT n√£o configurado")
    else:
        print("‚úÖ STATIC_ROOT configurado")
    
    # 6. Verificar MEDIA_ROOT
    if not settings.MEDIA_ROOT:
        warnings.append("‚ö†Ô∏è  MEDIA_ROOT pode precisar de configura√ß√£o para produ√ß√£o")
    else:
        print("‚úÖ MEDIA_ROOT configurado")
    
    # 7. Verificar se existem migra√ß√µes pendentes
    try:
        call_command('showmigrations', '--plan', verbosity=0)
        print("‚úÖ Migra√ß√µes verificadas")
    except:
        warnings.append("‚ö†Ô∏è  N√£o foi poss√≠vel verificar migra√ß√µes")
    
    # 8. Verificar se collectstatic foi executado
    static_files_exist = os.path.exists(os.path.join(settings.STATIC_ROOT or '', 'css', 'style.css'))
    if not static_files_exist:
        warnings.append("‚ö†Ô∏è  Execute 'python manage.py collectstatic' antes do deploy")
    else:
        print("‚úÖ Arquivos est√°ticos coletados")
    
    # 9. Verificar vari√°veis de ambiente recomendadas
    env_vars = ['SECRET_KEY', 'DATABASE_URL', 'ALLOWED_HOSTS']
    for var in env_vars:
        if var not in os.environ:
            warnings.append(f"‚ö†Ô∏è  Vari√°vel de ambiente {var} n√£o encontrada")
    
    # Resumo
    print("\n" + "=" * 50)
    print("üìã RESUMO DA VERIFICA√á√ÉO")
    print("=" * 50)
    
    if not issues and not warnings:
        print("üéâ Projeto pronto para deploy!")
    else:
        if issues:
            print(f"‚ùå {len(issues)} problema(s) cr√≠tico(s) encontrado(s):")
            for issue in issues:
                print(f"   {issue}")
        
        if warnings:
            print(f"\n‚ö†Ô∏è  {len(warnings)} aviso(s):")
            for warning in warnings:
                print(f"   {warning}")
    
    print("\nüìö Checklist adicional:")
    print("   ‚ñ° Configurar servidor web (Nginx/Apache)")
    print("   ‚ñ° Configurar HTTPS/SSL")
    print("   ‚ñ° Configurar backup autom√°tico")
    print("   ‚ñ° Configurar monitoramento")
    print("   ‚ñ° Testar formul√°rio de contato")
    print("   ‚ñ° Verificar SEO e meta tags")
    print("   ‚ñ° Testar responsividade")
    print("   ‚ñ° Configurar dom√≠nio personalizado")

if __name__ == "__main__":
    check_deploy_readiness()
